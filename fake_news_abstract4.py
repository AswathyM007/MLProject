# -*- coding: utf-8 -*-
"""FAKE_NEWS_ABSTRACT4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17sCReVjLelzTNVeXvhzoDVZtH7ry0ZEk

IMPORT NECESSARY LIBRARIES
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder

from google.colab import files
files.upload()

"""Displaying the data"""

fakenews_data = pd.read_csv('fakenewsdata.csv')
fakenews_data

"""printing the first five rows"""

fakenews_data.head()

"""INFORMATION ABOUT DATA"""

fakenews_data.info()

"""TO FIND MISSING OR NULL VALUES"""

fakenews_data.isnull().sum()

fakenews_data.info()

fakenews_data['Text'].value_counts()

fakenews_data['Text'].unique()

fakenews_data['Text_Tag'].value_counts()

fakenews_data['Text_Tag'].unique()

label_encoder = LabelEncoder()

fakenews_data['Text'] = label_encoder.fit_transform(fakenews_data['Text'])
fakenews_data['Text_Tag'] = label_encoder.fit_transform(fakenews_data['Text_Tag'])

fakenews_data['Text_Tag'].unique()

"""TO REMOVE SPECIFIC CLOUMN OF DATA SET"""

X = fakenews_data.drop(columns=['True'],axis=1)
Y = fakenews_data['True']

print(X)

print(Y)

sns.set()
plt.figure(figsize=(15,5))
# colors=sns.color_palette('set1')
sns.countplot(x='False',data=fakenews_data)

cor=X.corr()

plt.figure(figsize=(10,10))
sns.heatmap(cor,annot = True,cmap = 'Blues',fmt = '.2f',linewidths= 2,linecolor= 'black')

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier()
from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
from sklearn.ensemble import RandomForestClassifier
RF=RandomForestClassifier()
from sklearn.tree import DecisionTreeClassifier
clf=DecisionTreeClassifier()
from sklearn. naive_bayes import GaussianNB
gnb = GaussianNB()
# from sklearn import svm
# svm=svm.SVC(kernel='linear')

list=[knn,model,RF,clf,gnb]
max=-1
j1=None
i1=None
for i in list:
  for j in range(1,1001):
    X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.1,random_state=j)
    i.fit(X_train,Y_train)
    Y_predict=i.predict(X_test)
    accuracy=accuracy_score(Y_predict,Y_test)
    if accuracy>max:
      max=accuracy
      j1=j
      i1=i

print('The maximum accuracy is:',max)

print('The random state corresponding to it is:',j1)

print('The classification type is:',i1)